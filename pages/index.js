import Head from 'next/head'
import Router from "next/router";
import {
  useState,
  useEffect
} from 'react';
import {
  ColorModeScript,
  useColorMode,
  IconButton,
  Grid,
  Container,
  Flex,
  Input,
  InputGroup,
  InputRightAddon,
  Box,
  Center,
  Text,
  Image
} from '@chakra-ui/react';
import {
  MoonIcon,
  ChevronRightIcon,
  ChevronLeftIcon,
  SearchIcon,
  ArrowLeftIcon
} from '@chakra-ui/icons';
import api from './api/apiConfig';
import Card from '../components/Card'
import {CharacterModal} from '../components/Modal';
import theme from '../components/theme';


export default function Home({ data }) {
  const { colorMode, toggleColorMode } = useColorMode();
  const [page, setPage] = useState(1);
  const [offset, setOffset] = useState(0);
  const [search, setSearch] = useState("");
  const [limit, setLimit] = useState(20);
  const [character, setCharacter] = useState([]);
  const [orderBy, setOrderBy] = useState("name");
  const [open, setOpen] = useState(false);

  useEffect(() => {
    if (search.length > 0) {
      Router.push({
        query: {
          limit: limit,
          offset: offset,
          orderBy: orderBy,
          nameStartsWith: search,
        },
      });
    } else {
      Router.push({
        query: {
          limit: limit,
          offset: offset,
          orderBy: orderBy,
        },
      });
    }
  }, [limit, offset, search, orderBy]);

  {/*PAGINATION FUNCTIONS */ }
  const handleNextPage = () => {
    setPage(page + 1);
    setOffset(page * data.count);
  };

  const handleInitPage = () => {
    setPage(1);
    setOffset(0);
  };

  const handleBackPage = () => {
    setPage(page - 1);
    setOffset(offset - data.count);
  };
  {/*END PAGINATION FUNCTIONS */ }

  const handleOpenCharacter = (character) => {
    setCharacter(character);
    console.log(character)
    setOpen(!open);
  };

  return (
    <>
      <Head>
        <title>Marvel Heroes</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <link rel="preconnect" href="https://fonts.googleapis.com" />
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
        <link href="https://fonts.googleapis.com/css2?family=Marvel:wght@400;700&display=swap" rel="stylesheet" />
      </Head>

      {/*CONFIGURAÇÃO DE TEMA LIGHT/DARK*/}
      <ColorModeScript initialColorMode={theme.config.initialColorMode} />

      {/*MODAL CHARACTER INFOS*/}
      <CharacterModal open={open} setOpen={setOpen} character={character} />

      {/*NAVBAR*/}
      <Flex
        alignItems='center'
        background='white'
        mb='6' p='3'
        justifyContent='space-evenly'
      >
        {/*MARVEL SVG ICON*/}
        <Box onClick={handleInitPage}>
          <span
            className="icon--svg icon--svg mvl-animated-logo"
            aria-hidden="true"
          >
            <svg width="130" height="52" xmlns="http://www.w3.org/2000/svg">
              <rect fill="#EC1D24" width="100%" height="100%"></rect>
              <path
                fill="#FEFEFE"
                d="M126.222 40.059v7.906H111.58V4h7.885v36.059h6.757zm-62.564-14.5c-.61.294-1.248.44-1.87.442v-14.14h.04c.622-.005 5.264.184 5.264 6.993 0 3.559-1.58 5.804-3.434 6.705zM40.55 34.24l2.183-18.799 2.265 18.799H40.55zm69.655-22.215V4.007H87.879l-3.675 26.779-3.63-26.78h-8.052l.901 7.15c-.928-1.832-4.224-7.15-11.48-7.15-.047-.002-8.06 0-8.06 0l-.031 39.032-5.868-39.031-10.545-.005-6.072 40.44.002-40.435H21.278L17.64 26.724 14.096 4.006H4v43.966h7.95V26.78l3.618 21.192h4.226l3.565-21.192v21.192h15.327l.928-6.762h6.17l.927 6.762 15.047.008h.01v-.008h.02V33.702l1.845-.27 3.817 14.55h7.784l-.002-.01h.022l-5.011-17.048c2.538-1.88 5.406-6.644 4.643-11.203v-.002C74.894 19.777 79.615 48 79.615 48l9.256-.027 6.327-39.85v39.85h15.007v-7.908h-7.124v-10.08h7.124v-8.03h-7.124v-9.931h7.124z"
              ></path>
              <path fill="#EC1D24" d="M0 0h30v52H0z"></path>
              <path
                fill="#FEFEFE"
                d="M31.5 48V4H21.291l-3.64 22.735L14.102 4H4v44h8V26.792L15.577 48h4.229l3.568-21.208V48z"
              ></path>
            </svg>
          </span>
        </Box>


        <InputGroup w='30%'>
          <Input
            onChange={(e) => setSearch(e.target.value)}
            color='black'
            variant='flushed'
            focusBorderColor='#ec1d24'
            placeholder='Procure seu herói'
            _placeholder={{ color: 'black' }}
          />
          <InputRightAddon
            pointerEvents="none"
            background='transparent'
            border='inherit'
          >
            <SearchIcon color='#ec1d24' />
          </InputRightAddon>
        </InputGroup>
      </Flex>

      {/*CONTAINER CONTENT*/}
      <Container
        maxW='1200px'
        centerContent
      >

        {/*HEADLINE CONTAINER*/}
        <Flex w='100%' mb='5'>
          <Text w='100%'>Encontrados {data.count} Heróis</Text>
          {/*botão light/dark*/}
          <MoonIcon onClick={toggleColorMode} cursor='pointer' />
        </Flex>

        {/*CARD CONTENT*/}
        <Grid templateColumns='1fr 1fr 1fr 1fr' gap='0.8rem'>
          <Card
            character={data.results}
            setCharacter={(e) => handleOpenCharacter(e)}
          />
        </Grid>

        {/*PAGINATION BUTTONS*/}
        <Flex mt='10' mb='10' gap='10'>

          <Text textAlign='center'>
            {`${page}-${data.count} de ${data.total}`}
          </Text>

          <IconButton
            onClick={handleInitPage}
            icon={<ArrowLeftIcon fontSize={"1x1"} />}
            aria-label={""}
          />

          <IconButton
            disabled={page === 1 ? true : false}
            onClick={handleBackPage}
            icon={<ChevronLeftIcon fontSize={"2xl"} />}
            aria-label={""}
          />

          <IconButton
            onClick={handleNextPage}
            icon={<ChevronRightIcon fontSize={"2xl"} />}
            aria-label={""}
          />

        </Flex>
      </Container>
    </>
  )
}

export const getServerSideProps = async (context) => {
  const limit = context.query.limit;
  const offset = context.query.offset;
  const orderBy = context.query.orderBy;
  const nameStartsWith = context.query.nameStartsWith;

  const { data } = await api.get(`/characters`, {
    params: {
      limit,
      offset,
      orderBy,
      nameStartsWith,
    },
  });

  return {
    props: {
      data: data.data,
    },
  };
};
